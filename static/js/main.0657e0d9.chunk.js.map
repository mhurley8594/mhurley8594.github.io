{"version":3,"sources":["components/TotalHeader.js","components/TotalHeaderList.js","components/LogTable.js","components/Dashboard.js","components/LogForm.js","components/NavBar.js","App.js","serviceWorker.js","reducers/rootReducer.js","reducers/logReducer.js","index.js","store.js"],"names":["TotalHeader","props","react_default","a","createElement","label","count","TotalHeaderList","className","Component","LogTable","this","logs","map","log","key","id","food","grams","kcal","protein","fat","carb","renderTableRows","connect","state","App","currentDate","Date","toISOString","substr","htmlFor","type","defaultValue","components_TotalHeaderList","components_LogTable","LogForm","e","preventDefault","onSubmit","handleSubmit","name","Link","to","NavBar","BrowserRouter","components_NavBar","Switch","Route","exact","path","component","Dashboard","Boolean","window","location","hostname","match","combineReducers","date","ReactDOM","render","es","store","arguments","length","undefined","createStore","rootReducer","applyMiddleware","thunk","configureStore","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0657e0d9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function TotalHeader(props) {\r\n    return (\r\n        <div>\r\n            <h6>{props.label}</h6>\r\n            <h4>{props.count}</h4>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport TotalHeader from './TotalHeader';\r\n\r\nclass TotalHeaderList extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row text-center\">\r\n                <div className=\"col\">\r\n                    <TotalHeader label=\"kCal\" count={120} />\r\n                </div>\r\n                <div className=\"col\">\r\n                    <TotalHeader label=\"Protein\" count={15} />\r\n                </div>\r\n                <div className=\"col\">\r\n                    <TotalHeader label=\"Fat\" count={4} />\r\n                </div>\r\n                <div className=\"col\">\r\n                    <TotalHeader label=\"Carb\" count={7} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TotalHeaderList;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass LogTable extends Component {\r\n    renderTableRows() {\r\n        return this.props.logs.map((log) => {\r\n            return (\r\n                <tr key={log.id}>\r\n                    <td>{log.food}</td>\r\n                    <td>{log.grams}</td>\r\n                    <td>{log.kcal}</td>\r\n                    <td>{log.protein}</td>\r\n                    <td>{log.fat}</td>\r\n                    <td>{log.carb}</td>\r\n                </tr>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <table className=\"table table-striped table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Food</th>\r\n                            <th>Grams</th>\r\n                            <th>kCal</th>\r\n                            <th>Protein</th>\r\n                            <th>Fat</th>\r\n                            <th>Carb</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.renderTableRows()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        logs: state.logs\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(LogTable);\r\n","import React, { Component } from 'react';\r\nimport TotalHeaderList from './TotalHeaderList';\r\nimport LogTable from './LogTable';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    // Get the current date.\r\n    const today = new Date();\r\n    const currentDate = today.toISOString().substr(0, 10);\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <h3 className=\"text-center\">\r\n          Dashboard\r\n        </h3>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"datepicker\">\r\n            Date:\r\n          </label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"datepicker\"\r\n            className=\"form-control\"\r\n            defaultValue={currentDate}\r\n          />\r\n        </div>\r\n        <TotalHeaderList />\r\n        <LogTable />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport TotalHeaderList from './TotalHeaderList';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass LogForm extends Component {\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        // Get the current date.\r\n        const today = new Date();\r\n        const currentDate = today.toISOString().substr(0, 10);\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h3 className=\"text-center\">\r\n                    Add Log\r\n                </h3>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"date\">Date</label>\r\n                        <input\r\n                            type=\"date\"\r\n                            name=\"date\"\r\n                            id=\"date\"\r\n                            className=\"form-control\"\r\n                            defaultValue={currentDate}\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"food\">Food</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"food\"\r\n                            id=\"food\"\r\n                            className=\"form-control\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"grams\">Grams</label>\r\n                        <input\r\n                            id=\"grams\"\r\n                            name=\"grams\"\r\n                            type=\"number\"\r\n                            className=\"form-control\"\r\n                            defaultValue={100}\r\n                        />\r\n                    </div>\r\n                    <TotalHeaderList />\r\n                    <button className=\"btn btn-secondary\">\r\n                        Add Log\r\n                    </button>\r\n                    <Link to=\"/\" className=\"btn\">Cancel</Link>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LogForm;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg sticky-top navbar-dark bg-dark\">\r\n                <div className=\"container\">\r\n                    <Link to=\"/\" className=\"navbar-brand\">Nutrient Log</Link>\r\n                    <div className=\"navbar-nav text-right\">\r\n                        <div className=\"nav-item\">\r\n                            <Link to=\"/add\" className=\"btn btn-secondary btn-sm\">Add Log</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Switch,\n} from 'react-router-dom';\nimport Dashboard from './components/Dashboard';\nimport LogForm from './components/LogForm';\nimport NavBar from './components/NavBar';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <NavBar />\n          <Switch>\n            <Route exact={true} path=\"/\" component={Dashboard} />\n            <Route exact={true} path=\"/add\" component={LogForm} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Combines all reducers to create the application state.\r\n\r\nimport { combineReducers } from 'redux';\r\nimport logReducer from './logReducer';\r\n\r\nexport default combineReducers({\r\n    logs: logReducer\r\n});","// Returns a list of log entries.\r\n\r\nexport default () => {\r\n    return [\r\n        {\r\n            id: 1,\r\n            date: '11/07/2018',\r\n            food: 'String Cheese',\r\n            grams: '12',\r\n            kcal: '323',\r\n            protein: '6',\r\n            fat: '2',\r\n            carb: '9',\r\n        },\r\n        {\r\n            id: 2,\r\n            date: '11/07/2018',\r\n            food: 'Eggs',\r\n            grams: '123123',\r\n            kcal: '45435',\r\n            protein: '2345',\r\n            fat: '2324',\r\n            carb: '900',\r\n        },\r\n        {\r\n            id: 3,\r\n            date: '11/07/2018',\r\n            food: 'Peanut Butter',\r\n            grams: '234',\r\n            kcal: '234234',\r\n            protein: '986',\r\n            fat: '500',\r\n            carb: '345',\r\n        },\r\n        {\r\n            id: 4,\r\n            date: '11/07/2018',\r\n            food: 'Breyer\\'s Ice Cream - Chocolate',\r\n            grams: '400',\r\n            kcal: '4003420',\r\n            protein: '23',\r\n            fat: '3434',\r\n            carb: '70000',\r\n        }\r\n    ];\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Application state handlers.\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\nexport default function configureStore(initialState = {}) {\r\n    return createStore(\r\n        rootReducer,\r\n        applyMiddleware(thunk)\r\n    );\r\n}"],"sourceRoot":""}